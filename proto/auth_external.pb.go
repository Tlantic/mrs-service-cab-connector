// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth_external.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("auth_external.proto", fileDescriptor_1217a40e4822ed44) }

var fileDescriptor_1217a40e4822ed44 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x0b, 0xa2, 0x87, 0x15, 0x41, 0xa7, 0x07, 0x6b, 0xbc, 0xf5, 0xe4, 0xa9, 0x07, 0x3d,
	0x7b, 0xd0, 0x56, 0x82, 0xa2, 0x97, 0x54, 0xf1, 0x24, 0x12, 0xf5, 0x69, 0x82, 0x71, 0x26, 0xee,
	0xce, 0x82, 0xfd, 0x17, 0xfe, 0x64, 0xd9, 0x64, 0x4b, 0x1b, 0x88, 0x3d, 0x2d, 0xbc, 0xef, 0xbd,
	0x6f, 0x77, 0xcd, 0x30, 0xf7, 0x5a, 0x3c, 0xe3, 0x47, 0x61, 0x39, 0xaf, 0x26, 0xb5, 0x15, 0x15,
	0xda, 0x6e, 0x8e, 0x64, 0xbf, 0x61, 0xba, 0xa8, 0xe1, 0x5a, 0x70, 0xfa, 0xbb, 0x65, 0x46, 0x77,
	0xd9, 0xfc, 0xc2, 0x6b, 0x31, 0x15, 0x66, 0xbc, 0xaa, 0xd8, 0xab, 0xb8, 0xa5, 0x27, 0x93, 0xa4,
	0xd0, 0x7b, 0xf9, 0x04, 0x3f, 0x96, 0x5a, 0x88, 0xd7, 0xa9, 0xc5, 0x1b, 0x58, 0xcb, 0xbc, 0x72,
	0x74, 0xd2, 0x2a, 0x26, 0xff, 0x57, 0x32, 0x7c, 0x7b, 0x38, 0x4d, 0x86, 0xb1, 0x19, 0x6e, 0xc9,
	0xe0, 0x6a, 0x61, 0x87, 0xf1, 0x80, 0x66, 0xe6, 0x70, 0x7d, 0xbb, 0xee, 0xa6, 0xce, 0x62, 0xa3,
	0xe5, 0xdc, 0x50, 0x0a, 0xbd, 0x95, 0x8f, 0x92, 0x2f, 0x17, 0x0f, 0x2e, 0xbc, 0xfc, 0x0b, 0xbd,
	0x82, 0x83, 0xae, 0xc0, 0x57, 0x3a, 0x1e, 0xd0, 0x8d, 0xd9, 0x4b, 0xa1, 0x61, 0x37, 0x57, 0xb1,
	0x70, 0x74, 0xbc, 0xfa, 0xd6, 0x2a, 0x5d, 0x2a, 0x92, 0x7e, 0x18, 0x5d, 0x33, 0xb3, 0x1b, 0xc1,
	0x35, 0xbf, 0x0b, 0x1d, 0x75, 0xcb, 0x21, 0x5b, 0x7a, 0x46, 0x7d, 0xa8, 0xb5, 0xbc, 0xec, 0x34,
	0xe8, 0xec, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x91, 0xdf, 0xe8, 0xa7, 0xc9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MRSAuthConnectorExternalClient is the client API for MRSAuthConnectorExternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MRSAuthConnectorExternalClient interface {
	GetTokenWithoutCredentials(ctx context.Context, in *GetTokenWithoutCredentialsRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	GetTokenWithCredentials(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	GetLoginByUsername(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error)
	GetUserStores(ctx context.Context, in *GetUserStoresRequest, opts ...grpc.CallOption) (*GetUserStoresResult, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResult, error)
}

type mRSAuthConnectorExternalClient struct {
	cc *grpc.ClientConn
}

func NewMRSAuthConnectorExternalClient(cc *grpc.ClientConn) MRSAuthConnectorExternalClient {
	return &mRSAuthConnectorExternalClient{cc}
}

func (c *mRSAuthConnectorExternalClient) GetTokenWithoutCredentials(ctx context.Context, in *GetTokenWithoutCredentialsRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.MRSAuthConnectorExternal/GetTokenWithoutCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRSAuthConnectorExternalClient) GetTokenWithCredentials(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.MRSAuthConnectorExternal/GetTokenWithCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRSAuthConnectorExternalClient) GetLoginByUsername(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResult, error) {
	out := new(AuthResult)
	err := c.cc.Invoke(ctx, "/proto.MRSAuthConnectorExternal/GetLoginByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRSAuthConnectorExternalClient) GetUserStores(ctx context.Context, in *GetUserStoresRequest, opts ...grpc.CallOption) (*GetUserStoresResult, error) {
	out := new(GetUserStoresResult)
	err := c.cc.Invoke(ctx, "/proto.MRSAuthConnectorExternal/GetUserStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mRSAuthConnectorExternalClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResult, error) {
	out := new(GetUserInfoResult)
	err := c.cc.Invoke(ctx, "/proto.MRSAuthConnectorExternal/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MRSAuthConnectorExternalServer is the server API for MRSAuthConnectorExternal service.
type MRSAuthConnectorExternalServer interface {
	GetTokenWithoutCredentials(context.Context, *GetTokenWithoutCredentialsRequest) (*AuthResponse, error)
	GetTokenWithCredentials(context.Context, *AuthRequest) (*AuthResponse, error)
	GetLoginByUsername(context.Context, *AuthRequest) (*AuthResult, error)
	GetUserStores(context.Context, *GetUserStoresRequest) (*GetUserStoresResult, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResult, error)
}

func RegisterMRSAuthConnectorExternalServer(s *grpc.Server, srv MRSAuthConnectorExternalServer) {
	s.RegisterService(&_MRSAuthConnectorExternal_serviceDesc, srv)
}

func _MRSAuthConnectorExternal_GetTokenWithoutCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenWithoutCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRSAuthConnectorExternalServer).GetTokenWithoutCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MRSAuthConnectorExternal/GetTokenWithoutCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRSAuthConnectorExternalServer).GetTokenWithoutCredentials(ctx, req.(*GetTokenWithoutCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRSAuthConnectorExternal_GetTokenWithCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRSAuthConnectorExternalServer).GetTokenWithCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MRSAuthConnectorExternal/GetTokenWithCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRSAuthConnectorExternalServer).GetTokenWithCredentials(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRSAuthConnectorExternal_GetLoginByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRSAuthConnectorExternalServer).GetLoginByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MRSAuthConnectorExternal/GetLoginByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRSAuthConnectorExternalServer).GetLoginByUsername(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRSAuthConnectorExternal_GetUserStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRSAuthConnectorExternalServer).GetUserStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MRSAuthConnectorExternal/GetUserStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRSAuthConnectorExternalServer).GetUserStores(ctx, req.(*GetUserStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MRSAuthConnectorExternal_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MRSAuthConnectorExternalServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MRSAuthConnectorExternal/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MRSAuthConnectorExternalServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MRSAuthConnectorExternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MRSAuthConnectorExternal",
	HandlerType: (*MRSAuthConnectorExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenWithoutCredentials",
			Handler:    _MRSAuthConnectorExternal_GetTokenWithoutCredentials_Handler,
		},
		{
			MethodName: "GetTokenWithCredentials",
			Handler:    _MRSAuthConnectorExternal_GetTokenWithCredentials_Handler,
		},
		{
			MethodName: "GetLoginByUsername",
			Handler:    _MRSAuthConnectorExternal_GetLoginByUsername_Handler,
		},
		{
			MethodName: "GetUserStores",
			Handler:    _MRSAuthConnectorExternal_GetUserStores_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MRSAuthConnectorExternal_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth_external.proto",
}
